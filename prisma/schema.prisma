// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  username         String         @unique
  password         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  groupMembers     GroupMember[]
  groupMessages    GroupMessage[]
  createdGroups    Group[]
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  createdBy Int

  user     User           @relation(fields: [createdBy], references: [id])
  members  GroupMember[]
  messages GroupMessage[]
}

model GroupMember {
  id      Int @id @default(autoincrement())
  groupId Int
  userId  Int

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([groupId, userId])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model GroupMessage {
  id        Int      @id @default(autoincrement())
  senderId  Int
  groupId   Int
  content   String
  createdAt DateTime @default(now())

  sender User  @relation(fields: [senderId], references: [id])
  group  Group @relation(fields: [groupId], references: [id])
}
